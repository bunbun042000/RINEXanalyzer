/*
 * WGS84_Frame.cpp
 *
 *  Created on: 2013/06/10
 *      Author: bun
 */

#include "WGS84_Frame.h"
#include "ECEF_Frame.h"
#include <cmath>

CWGS84_Frame::CWGS84_Frame()
{
	Latitude = 0.0;
	Longitude = 0.0;
	Geoidal_Hight = 0.0;

}

CWGS84_Frame::CWGS84_Frame(long double Lat, long double Longi, long double G_Hight)
{
	long double a, b, e, f, n;

	Latitude = Lat;
	Longitude = Longi;
	Geoidal_Hight = G_Hight;

	f = 1.0 / F_Earth;			// Reciprocal of Flattening
	a = R_Earth;				// Semi-major Axis
	b = a * (1.0 - f);			// Semi-minor Axis
	e = sqrt(f * (2.0 - f));	// Eccentricity

	n = a / sqrt(1.0 - e * e * sin(Latitude) * sin(Latitude));

	x = (n + Geoidal_Hight) * cos(Latitude) * cos(Longitude);
	y = (n + Geoidal_Hight) * cos(Latitude) * sin(Longitude);
	z = (n * (1.0 - e * e) + Geoidal_Hight) * sin(Latitude);


}

CWGS84_Frame::CWGS84_Frame(const CWGS84_Frame &wgs84_f) : CECEF_Frame(wgs84_f.x, wgs84_f.y, wgs84_f.z)
{
	this->Latitude = wgs84_f.Latitude;
	this->Longitude = wgs84_f.Longitude;
	this->Geoidal_Hight = wgs84_f.Geoidal_Hight;
}

//CWGS84_Frame::CWGS84_Frame(const CECEF_Frame &ecef_frame)
//{
//	long double a,b,e,f,n,h,p,t,sint,cost;
//	if (ecef_frame.Distance() < 1.0e-10)
//	{
//		Latitude = 0.0;
//		Longitude = 0.0;
//		Geoidal_Hight = -R_Earth;
//	}
//	else
//	{
//		f = 1.0 / F_Earth;			// Reciprocal of Flattening
//		a = R_Earth;				// Semi-major Axis
//		b = a * (1.0 - f);			// Semi-minor Axis
//		e = sqrt(f * (2.0 - f));	// Eccentricity
//
//		h = pow(a, 2) - pow(b, 2);
//		p = sqrt(pow(ecef_frame.GetX(), 2) + pow(ecef_frame.GetY(), 2));
//		t = atan2(ecef_frame.GetZ() * a, p * b);
//		sint = sin(t);
//		cost = cos(t);
//
//		Latitude = atan2(ecef_frame.GetZ() + h / b * sint * sint *sint, p - h / a * cost * cost * cost);
//		n = a / sqrt(1.0 - e * e* sin(Latitude) * sin(Latitude));
//		Longitude = atan2(ecef_frame.GetY(), ecef_frame.GetX());
//		Geoidal_Hight = p / cos(Latitude) - n;
//	}
//}

CWGS84_Frame::~CWGS84_Frame()
{
	//Do Nothing
}

//CECEF_Frame CWGS84_Frame::ToECEF_Frame()
//{
//
//}

/*
 * Matrix.cpp
 *
 *  Created on: 2013/06/13
 *      Author: bun
 */


#include "Matrix.h"

CMatrix::CMatrix()
{
	max_column = 0;
	max_line = 0;

	data = 0;
}

CMatrix::CMatrix(int col, int lin)
{
	max_column = col;
	max_line = lin;

	data = new long double[max_column * max_line];

}

CMatrix::CMatrix(const CMatrix &mat)
{
	int i, size;

	max_column = mat.max_column;
	max_line = mat.max_line;

	size = max_column * max_line;

	data = new long double[size];
	for(i = 0; i < size; i++)
	{
		data[i] = mat.data[i];
	}

}

CMatrix::~CMatrix()
{
	max_column = 0;
	max_line = 0;

	delete [] data;
	data = 0;
}

bool CMatrix::SetData(long double x, int column, int line)
{
	if (column > max_column)
	{
		return false;
	}
	else
	{
		// Do nothing
	}

	if (line > max_line)
	{
		return false;
	}
	else
	{
		// Do nothing
	}

	data[(line - 1)* max_column + column - 1] = x;
	return true;

}


bool CMatrix::SetLine(const long double *line, int lin, int max_col)
{

	int i;

	if (max_column != max_col)
	{
		return false;
	}
	else
	{
		// Do nothing
	}

	if(lin > max_line)
	{
		return false;
	}
	else
	{
		// Do nothing
	}

	for (i = 0; i < max_column; i++)
	{
		SetData(line[i], i, lin - 1);
	}
	return true;
}

bool CMatrix::SetColumn(const long double *column, int col, int max_lin)
{

	int i;

	if (max_line != max_lin)
	{
		return false;
	}
	else
	{
		// Do nothing
	}

	if(col > max_column)
	{
		return false;
	}
	else
	{
		// Do nothing
	}

	for (i = 0; i < max_line; i++)
	{
		SetData(column[i], col - 1, i);
	}
	return true;

}

CMatrix CMatrix::operator+(CMatrix &s)
{

	if ((max_column != s.max_column) || (max_line != s.max_line))
	{
		return CMatrix();
	}
	else
	{
		// Do nothing
	}

	CMatrix dest(s.max_column, s.max_line);

	int i, j;

	for(i = 1; i < dest.max_column + 1; i++)
	{
		for(j = 1; j < dest.max_line + 1; j++)
		{
			dest.SetData(GetData(i, j) + s.GetData(i, j), i, j);
		}
	}

	return dest;

}

CMatrix CMatrix::operator-(CMatrix &s)
{

	if ((max_column != s.max_column) || (max_line != s.max_line))
	{
		return CMatrix();
	}
	else
	{
		// Do nothing
	}

	CMatrix dest(s.max_column, s.max_line);

	int i, j;

	for(i = 1; i < dest.max_column + 1; i++)
	{
		for(j = 1; j < dest.max_line + 1; j++)
		{
			dest.SetData(GetData(i, j) - s.GetData(i, j), i, j);
		}
	}

	return dest;

}

CMatrix CMatrix::operator*(CMatrix &s)
{
	if ((max_column != s.max_line) || (max_line != s.max_column))
	{
		return CMatrix();
	}
	else
	{
		// Do nothing
	}

	CMatrix dest(max_line, s.max_column);

	int i, j, k;

	for(i = 1; i < dest.max_column + 1; i++)
	{
		for(j = 1; j < s.max_line + 1; j++)
		{
			for (k = 1; j < max_column + 1; k++)
			{
				dest.SetData(GetData(k, j) * s.GetData(i, k), i, j);
			}
		}
	}

	return dest;

}

CMatrix operator*(CMatrix &s, long double x)
{

	CMatrix dest(s.max_column, s.max_line);

	int i, j;

	for(i = 1; i < dest.max_column + 1; i++)
	{
		for(j = 1; j < dest.max_line + 1; j++)
		{
			dest.SetData(s.GetData(i, j), i, j);
		}
	}

	return dest;

}

CMatrix operator*(long double x, CMatrix &s)
{

	return s * x;

}
